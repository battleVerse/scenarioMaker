% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_scenario.R
\name{create_scenario}
\alias{create_scenario}
\title{Creates scenario}
\usage{
create_scenario(
  scenarioName = "scenario",
  targetTruth = NA,
  ownShipTruth = NA,
  sensorData = NA,
  engagementData = NA,
  platformInfo = NA,
  verbose = TRUE,
  preCalcTargetTrackDist = TRUE,
  preCalcTargetOwnShipDist = TRUE,
  preCalcTrackOwnShipDist = TRUE
)
}
\arguments{
\item{scenarioName}{name of scenario}

\item{targetTruth}{data frame containing all of the truth data for each target (likely from GPS or land-based radar systems). MUST have the following columns:
\itemize{
 \item{time: (double) time of measurement. We currently recommend POSIX}
 \item{lon: (double) longitude of target at time of measurement}
 \item{lat: (double) latitude of target at time of measurement}
 \item{alt: (double) altitude of target at time of measurement}
 \item{truthID: (factor) name or identifier for target. We recommend letters or names}
 \item{heading: (double) target heading in degrees azimuth}
}}

\item{ownShipTruth}{data frame containing all of the truth position of the sensor system (likely from GPS or land-based radar systems). This may be ownship if testing something on a ship or the lat/lon position of a stationary ststem. MUST have the following columns:
\itemize{
 \item{time: (double) time of measurement. We currently recommend POSIX}
 \item{lon: (double) longitude of target at time of measurement}
 \item{lat: (double) latitude of target at time of measurement}
 \item{alt: (double) altitude of target at time of measurement}
 \item{truthID: (factor) name or identifier for target. We recommend letters or names}
 \item{heading: (double) sensor system heading in degrees azimuth}
}}

\item{sensorData}{data frame containing each sensor point for all of the tracks. MUST have the following columns:
\itemize{
 \item{time: (double) time of measurement. We currently recommend POSIX}
 \item{lon: (double) longitude of target at time of measurement}
 \item{lat: (double) latitude of target at time of measurement}
 \item{alt: (double) altitude of target at time of measurement}
 \item{trackNum: (factor) identifier for the track. We recommend numbers for each unique track returned by the sensor system}
 }}

\item{engagementData}{Requires the following columns:
\itemize{
 \item{time: (double) time of the engagement}
 \item{source: (string) name of the platform doing the shooting}
 \item{target: (string) name of the target}
 \item{weapon: (string) name of the weapon}
 \item{kill: (double) 0 = no kill, 1 = kill}
 \item{color: (string) color of the line to be drawn (must be a valid SIMDIS choice)}
 }}

\item{platformInfo}{display info for all platforms. Requires the following columns:
\itemize{
 \item{truthID: (factor) name or identifier for target}
 \item{platformIcon: (string) name of platform icon (must choose from valid SIMDIS options)}
 \item{platformType: (string) type of platform (e.g., ship) (must choose from valid SIMDIS options)}
 \item{trackColor: (string) color of the track (must be a valid SIMDIS choice)}
 }}

\item{verbose}{(default=TRUE)}

\item{preCalcTargetTrackDist}{(default=TRUE) if false, will not pre-calculate targetTrackDistance (which can be big and slow)}

\item{preCalcTargetOwnShipDist}{(default=TRUE) if false, will not pre-calculate targetOwnShipDistance (which can be big and slow)}

\item{preCalcTrackOwnShipDist}{(default=TRUE) if false, will not pre-calculate trackOwnShipDistance (which can be big and slow)}
}
\value{
Scenario file, which will include:
\itemize{
\item{scenarioName}
\item{sensorData}
\item{targetTruth}
\item{ownShipTruth}
\item{engagementData: used for sandTable}
\item{platformInfo: used for SIMDIS export}
\item{targetTrackDistance}
\item{targetOwnShipDistance}
\item{trackOwnShipDistance}
}
}
\description{
Creates a scenario from the supplied data.  This is one of the first scenarioMaker functions that users will need and one of the most important as most of the functions take a scenario as input.  Users may supply as much of the raw data as they have, and create_scenario() will (by default) calculate as many of the target-track-ownship distances as possible.
}
\examples{
 myScenario = create_scenario(
  scenarioName="myScenario",
  targetTruth=example1_truthData,
  ownShipTruth=example1_ownShipData,
  sensorData=example1_sensorData,
  engagementData=example1_engagementData,
  platformInfo=example1_platformInfo,
  verbose=TRUE,
  preCalcTargetTrackDist=TRUE)

}
